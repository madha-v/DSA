//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
  public:
    void diagonalSort(vector<vector<int> >& matrix, int n, int m) {
        
        unordered_map<int, vector<int>> mp;

        // Step 1: Store all diagonals in the map
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                mp[i - j].push_back(matrix[i][j]);
            }
        }

        // Step 2: Sort each diagonal based on its position
        for (pair<const int, vector<int>>& it : mp) {
            if (it.first < 0) { 
                // Upper-right triangle (descending order)
                sort(it.second.rbegin(), it.second.rend());
            } else if (it.first > 0) {  
                // Lower-left triangle (ascending order)
                sort(it.second.begin(), it.second.end());
            }
            // Major diagonal (it.first == 0) remains unchanged
        }

        // Step 3: Place sorted elements back in the matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = mp[i - j].front();
                mp[i - j].erase(mp[i - j].begin());
            }
        }
    }
};

        



//{ Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        cin>>n>>m;

        int inputline2[n*m];
        for (int i = 0; i < n*m; ++i)
            cin>> inputline2[i];
        vector<vector<int> > matrix( n , vector<int> (m, 0));

        for(int i=0; i<n; i++) {
            for (int j = 0; j < m; ++j) {
                matrix[i][j] = inputline2[i * m + j]; 
            }
        }
        
        Solution ob;
        ob.diagonalSort(matrix, n, m);

        // print the modified matrix
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j < m; j++) { 
                cout << matrix[i][j] << " "; 
            } 
            cout << endl; 
        }    
    
cout << "~" << "\n";
}
    return 0;
}


// } Driver Code Ends
