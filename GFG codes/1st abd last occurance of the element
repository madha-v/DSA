//{ Driver Code Starts

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution {
    
    int leftmost(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n - 1, left = -1;
        
        while (l <= r) {
            int mid = l + (r - l) / 2; // Correct calculation of mid
            if (nums[mid] == target) {
                left = mid;    // Record the position of the target
                r = mid - 1;   // Continue searching on the left side
            } 
            else if (nums[mid] < target) {
                l = mid + 1;   // Move to the right side
            } 
            else {
                r = mid - 1;   // Move to the left side
            }
        }
        return left; // Will return -1 if not found
    }
    
      int rightmost(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n - 1, right = -1;
        
        while (l <= r) {
            int mid = l + (r - l) / 2; // Correct calculation of mid
            if (nums[mid] == target) {
                right = mid;    // Record the position of the target
                l=mid+1;   // Continue searching on the left side
            } 
            else if (nums[mid] < target) {
                l = mid + 1;   // Move to the right side
            } 
            else {
                r = mid - 1;   // Move to the left side
            }
        }
        return right; // Will return -1 if not found
    }
    
    
  public:
    vector<int> find(vector<int>& arr, int x) {
         int l=leftmost(arr, x);
         int r=rightmost(arr,x);
         
         return {l,r};
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }
        int x;
        cin >> x;
        cin.ignore();
        vector<int> ans;
        Solution ob;
        ans = ob.find(arr, x);
        cout << ans[0] << " " << ans[1] << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
