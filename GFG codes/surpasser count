class Solution {
  public:
    vector<int> findSurpasser(vector<int>& arr) {
              int n = arr.size();
        vector<int> res(n, 0);
        vector<pair<int,int>> indexed; 
        
        for (int i = 0; i < n; i++) 
            indexed.push_back({arr[i], i});
        
        mergeSort(indexed, 0, n-1, res);
        return res;
    }
    
    void mergeSort(vector<pair<int,int>>& arr, int l, int r, vector<int>& res) {
        if (l >= r) return;
        int mid = (l + r) / 2;
        mergeSort(arr, l, mid, res);
        mergeSort(arr, mid+1, r, res);
        merge(arr, l, mid, r, res);
    }
    
    void merge(vector<pair<int,int>>& arr, int l, int mid, int r, vector<int>& res) {
        vector<pair<int,int>> temp;
        int i = l, j = mid+1;
        int rightCount = 0; 
        
        while (i <= mid && j <= r) {
            if (arr[i].first < arr[j].first) {
                
                temp.push_back(arr[j]);
                rightCount++;
                j++;
            } else {
          
                res[arr[i].second] += rightCount;
                temp.push_back(arr[i]);
                i++;
            }
        }
        
        while (i <= mid) {
            res[arr[i].second] += rightCount;
            temp.push_back(arr[i]);
            i++;
        }
        while (j <= r) {
            temp.push_back(arr[j]);
            j++;
        }
        
        for (int k = l; k <= r; k++)
            arr[k] = temp[k-l];
    }
};
