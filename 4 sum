class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> res;
        if (n < 4) return res;

        sort(nums.begin(), nums.end());

        for (int i = 0; i < n - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1])
             continue;

            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;

                int l = j + 1, r = n - 1;
                while (l < r) {
                    long long sum = (long long)nums[i] + nums[j] + nums[l] + nums[r];

                    if (sum == target) {
                        res.push_back({nums[i], nums[j], nums[l], nums[r]});
                        l++;
                        r--;

                        while (l < r && nums[l] == nums[l - 1]) l++;
                        while (l < r && nums[r] == nums[r + 1]) r--;
                    } 
                    else if (sum < target) {
                        l++;
                    } 
                    else {
                        r--;
                    }
                }
            }
        }
        return res;
    }
};
  // optimised version  will be using the hashmap

class Solution {
public:
    int subarraysWithXorK(vector<int> &nums, int k) {
        int n = nums.size();
        unordered_map<int,int> freq;
        int xr = 0, c = 0;

        for (int i = 0; i < n; i++) {
            xr ^= nums[i];

            if (xr == k) c++;  // subarray [0..i] has xor = k

            int need = xr ^ k;
            if (freq.find(need) != freq.end()) {
                c += freq[need];
            }

            freq[xr]++;
        }
        return c;
    }
};
