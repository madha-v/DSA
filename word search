class Solution {
    vector<vector<int>> direction{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
public:
    bool find(vector<vector<char>>& board, int i, int j, int idx, string& word) {
        if (idx == word.length()) {
            return true;
        }
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] == '$') {
            return false;
        }
        if (board[i][j] != word[idx]) {
            return false;
        }
        
        // Mark the cell as visited
        char temp = board[i][j];
        board[i][j] = '$';

        // Explore all 4 directions
        for (auto &dir : direction) {
            int new_i = i + dir[0];
            int new_j = j + dir[1];

            if (find(board, new_i, new_j, idx + 1, word)) {
                return true;
            }
        }
        
        // Restore the cell
        board[i][j] = temp;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                if (board[i][j] == word[0] && find(board, i, j, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }
};
