//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int, int>> adj[n + 1];

        // Build the adjacency list
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1], w = edges[i][2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }

        // Distance and parent tracking
        vector<int> dist(n + 1, INT_MAX);
        vector<int> parent(n + 1, -1);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Start from node 1
        dist[1] = 0;
        pq.push({0, 1});

        while (!pq.empty()) {
            int node = pq.top().second;
            int weight = pq.top().first;
            pq.pop();

            if (weight > dist[node]) continue; // Skip outdated paths

            for (int i = 0; i < adj[node].size(); i++) {
                int neighbor = adj[node][i].first;
                int edgeWeight = adj[node][i].second;

                if (dist[node] + edgeWeight < dist[neighbor]) {
                    dist[neighbor] = dist[node] + edgeWeight;
                    pq.push({dist[neighbor], neighbor});
                    parent[neighbor] = node;
                }
            }
        }

        // If there's no path to node n
        if (dist[n] == INT_MAX) return {-1};

        // Reconstruct path
        vector<int> path;
        int curr = n;
        while (curr != -1) {
            path.push_back(curr);
            curr = parent[curr];
        }
        reverse(path.begin(), path.end());

        // Add weight at the beginning
        path.insert(path.begin(), dist[n]);
        return path;
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        map<pair<int, int>, int> mp;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
            mp[{edges.back()[0], edges.back()[1]}] = edges.back()[2];
            mp[{edges.back()[1], edges.back()[0]}] = edges.back()[2];
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        int ans = 0;
        for (int i = 2; i < res.size(); i++) {
            ans += mp[{res[i], res[i - 1]}];
        }
        if (ans == res[0]) {

        } else if (res.size() == 1 && res[0] == -1)
            ans = res[0];
        else
            ans = -2;
        cout << ans << endl;
        cout << "~" << endl;
    }
}

// } Driver Code Ends
