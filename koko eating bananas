class Solution {
public:
    bool caneat(vector<int>& piles, int mid, int h) {
        int actual_hours = 0;
        for (int i = 0; i < piles.size(); i++) {
            actual_hours += ceil(piles[i] + mid - 1 )/ mid; 
        }
        return actual_hours <= h;
    }
    
    int minEatingSpeed(vector<int>& piles, int h) {
        int l = 1;
        int r = *max_element(begin(piles), end(piles));
       
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (caneat(piles, mid, h)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
};
